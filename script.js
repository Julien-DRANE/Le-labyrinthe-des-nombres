// script.js

// S√©lection des √©l√©ments
const portals = [
    document.getElementById('portal1'),
    document.getElementById('portal2'),
    document.getElementById('portal3')
];
const targetNumberDisplay = document.getElementById('targetNumber');
const startButton = document.getElementById('start');
const messageBox = document.getElementById('message');
const character = document.getElementById('character');
const correctSound = document.getElementById('correctSound');
const wrongSound = document.getElementById('wrongSound');
const spaceshipSound = document.getElementById('spaceshipSound');
const jetpackSound = document.getElementById('jetpackSound');
const scoreDisplay = document.getElementById('score');
// const gaugeFill = document.getElementById('gaugeFill'); // Plus n√©cessaire
// const oxygenFill = document.getElementById('oxygenFill'); // Plus n√©cessaire

// S√©lection du canvas pour la jauge d'oxyg√®ne
const oxygenCanvas = document.getElementById('oxygenCanvas');
const ctx = oxygenCanvas.getContext('2d');

// S√©lection du son de bip
const beepSound = document.getElementById('beepSound');

// Autres s√©lections...

let currentStreak = 0;
const requiredStreak = 7;
let score = 0;
let targetNumber = 0;

// Variables pour la jauge d'oxyg√®ne
let oxygenLevel = 60; // Temps en secondes (1 minute)
const totalOxygenTime = 60; // Dur√©e totale en secondes

let oxygenInterval; // Pour stocker l'intervalle de d√©pl√©tion

// Fonction pour dessiner la jauge d'oxyg√®ne
function drawOxygenGauge() {
    const remainingTimeRatio = oxygenLevel / totalOxygenTime;

    // Effacer le canvas
    ctx.clearRect(0, 0, oxygenCanvas.width, oxygenCanvas.height);

    // D√©finir les couleurs
    let color = '#ffffff'; // Blanc par d√©faut
    if (oxygenLevel <= 10) {
        color = '#ff0000'; // Rouge si <= 10 secondes
    }

    // Dessiner le fond du cercle (gris clair)
    ctx.beginPath();
    ctx.arc(oxygenCanvas.width / 2, oxygenCanvas.height / 2, 40, 0, 2 * Math.PI);
    ctx.fillStyle = '#333';
    ctx.fill();

    // Dessiner le secteur repr√©sentant l'oxyg√®ne restant
    ctx.beginPath();
    ctx.moveTo(oxygenCanvas.width / 2, oxygenCanvas.height / 2);
    ctx.arc(
        oxygenCanvas.width / 2,
        oxygenCanvas.height / 2,
        40,
        -Math.PI / 2,
        -Math.PI / 2 + 2 * Math.PI * remainingTimeRatio,
        false
    );
    ctx.closePath();
    ctx.fillStyle = color;
    ctx.fill();

    // Ajouter du texte pour le temps restant
    ctx.fillStyle = '#000000';
    ctx.font = 'bold 16px Arial';
    ctx.textAlign = 'center';
    ctx.textBaseline = 'middle';
    ctx.fillText(`${oxygenLevel}s`, oxygenCanvas.width / 2, oxygenCanvas.height / 2);
}

// Fonction pour d√©marrer la d√©pl√©tion de l'oxyg√®ne
function startOxygenDepletion() {
    oxygenLevel = totalOxygenTime; // R√©initialiser √† 60 secondes
    drawOxygenGauge(); // Dessiner la jauge initiale

    oxygenInterval = setInterval(() => {
        oxygenLevel--;
        if (oxygenLevel < 0) oxygenLevel = 0;
        drawOxygenGauge();
        updateOxygenGauge(); // Pour g√©rer la fin du jeu

        // G√©rer les bips sonores
        handleBeepSounds();
    }, 1000); // D√©cr√©menter chaque seconde
}

// Fonction pour g√©rer les bips sonores
function handleBeepSounds() {
    if (oxygenLevel > 10) {
        if (oxygenLevel % 10 === 0) {
            beepSound.play();
        }
    } else if (oxygenLevel <= 10 && oxygenLevel > 0) {
        // Jouer le bip chaque seconde
        beepSound.play();
    }
}

// Fonction pour arr√™ter la d√©pl√©tion de l'oxyg√®ne
function stopOxygenDepletion() {
    clearInterval(oxygenInterval);
}

// Fonction pour mettre √† jour la jauge d'oxyg√®ne
function updateOxygenGauge() {
    // V√©rifier si l'oxyg√®ne est √©puis√©
    if (oxygenLevel <= 0) {
        endGame(false); // Passer un param√®tre pour indiquer l'√©chec
    }
}

// Fonction pour terminer le jeu
function endGame(victory = false) {
    // Arr√™ter la d√©pl√©tion de l'oxyg√®ne
    stopOxygenDepletion();

    // Arr√™ter les sons en cours
    spaceshipSound.pause();
    lowOxygenSound.pause();
    beepSound.pause();

    if(victory) {
        messageBox.textContent = `Mission Accomplie‚ÄØ! Tu as atteint ${requiredStreak} bonnes r√©ponses cons√©cutives üéâ`;
        messageBox.style.color = "#00ff99";

        // Faire appara√Ætre la station spatiale
        const spaceStation = document.getElementById('spaceStation');
        spaceStation.style.display = 'block';

        // Jouer le son final
        const finalSound = new Audio('sounds/final.mp3');
        finalSound.play();

        // D√©placer le personnage vers la station
        moveCharacterToStation(spaceStation);

        // Apr√®s un d√©lai, afficher la fen√™tre modale pour le score
        setTimeout(() => {
            modal.style.display = "block";
        }, 5000); // 5 secondes pour laisser le temps √† l'animation
    } else {
        messageBox.textContent = `Mission Termin√©e‚ÄØ! Ton score est de ${score} points ‚≠ê`;
        messageBox.style.color = "#ff5722";
        // Afficher la fen√™tre modale pour entrer le nom
        modal.style.display = "block";
    }
}

// Fonction pour d√©placer le personnage vers la station
function moveCharacterToStation(spaceStation) {
    // Obtenir les positions du personnage et de la station
    const characterRect = character.getBoundingClientRect();
    const stationRect = spaceStation.getBoundingClientRect();

    // Calculer la distance √† parcourir
    const deltaX = stationRect.left - characterRect.left;
    const deltaY = stationRect.top - characterRect.top;

    // Appliquer une transition au personnage
    character.style.transition = "transform 5s linear";
    character.style.transform = `translate(${deltaX}px, ${deltaY}px) scale(0.5)`;
}

// Autres fonctions existantes...

// √âcouteurs d'√©v√©nements
startButton.addEventListener('click', startGame);
saveScoreButton.addEventListener('click', saveScore);
closeHighScoresButton.addEventListener('click', closeHighScores);
closeModal.addEventListener('click', () => {
    modal.style.display = "none";
});

// Initialisation au chargement de la fen√™tre
window.onload = () => {
    initStarfield();
    addPortalEventListeners();
};
